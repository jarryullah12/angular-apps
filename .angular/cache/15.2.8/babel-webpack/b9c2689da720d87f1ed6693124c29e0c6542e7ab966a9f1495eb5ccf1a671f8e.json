{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.cartitemlist = [];\n    this.productlist = new BehaviorSubject([]);\n    this.amount = 0;\n  }\n  getproduct() {\n    return this.http.get(\"https://dummyjson.com/products\");\n  }\n  getproductbyid(id) {\n    return this.http.get(\"https://dummyjson.com/products/\" + id);\n  }\n  addtocart(data) {\n    this.cartitemlist.push(data);\n    this.productlist.next(this.cartitemlist);\n    console.log(this.cartitemlist);\n  }\n  products() {\n    return this.productlist.asObservable();\n  }\n  removecartitem(data) {\n    const indexToRemove = this.cartitemlist.findIndex(a => data.id === a.id);\n    if (indexToRemove !== -1) {\n      this.cartitemlist.splice(indexToRemove, 1);\n      this.productlist.next([...this.cartitemlist]); // Using spread operator to create a new array\n    }\n  }\n  // total calculation\n  calculateprice() {\n    let total = 0;\n    this.cartitemlist.map(a => {\n      total += a.price;\n    });\n    return total;\n  }\n  // remove all item\n  removeallitems() {\n    this.cartitemlist = [];\n    this.productlist.next(this.cartitemlist);\n  }\n  // Passing data from one component amother\n  sendfinalamount(data) {\n    this.amount = data;\n  }\n  recievefinalamount() {\n    return this.amount;\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHjB,iBAAY,GAAQ,EAAE;IACtB,gBAAW,GAAG,IAAIH,eAAe,CAAM,EAAE,CAAC;IAC1C,WAAM,GAAW,CAAC;EACe;EAExCI,UAAU;IACR,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,gCAAgC,CAAC;EACnE;EAEAC,cAAc,CAACC,EAAU;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,iCAAiC,GAAGE,EAAE,CAAC;EAC9D;EAEAC,SAAS,CAACC,IAAa;IACrB,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,IAAI,CAAC;IAC5B,IAAI,CAACG,WAAW,CAACC,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC;IACxCI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,YAAY,CAAC;EAChC;EAEAM,QAAQ;IACN,OAAO,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;EACxC;EAGAC,cAAc,CAACT,IAAa;IAC1B,MAAMU,aAAa,GAAG,IAAI,CAACT,YAAY,CAACU,SAAS,CAAEC,CAAU,IAAKZ,IAAI,CAACF,EAAE,KAAKc,CAAC,CAACd,EAAE,CAAC;IAEnF,IAAIY,aAAa,KAAK,CAAC,CAAC,EAAE;MACxB,IAAI,CAACT,YAAY,CAACY,MAAM,CAACH,aAAa,EAAE,CAAC,CAAC;MAC1C,IAAI,CAACP,WAAW,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEnD;EAEA;EACAa,cAAc;IACZ,IAAIC,KAAK,GAAG,CAAC;IACb,IAAI,CAACd,YAAY,CAACe,GAAG,CAAEJ,CAAM,IAAI;MAC/BG,KAAK,IAAIH,CAAC,CAACK,KAAK;IAClB,CAAC,CAAC;IACF,OAAOF,KAAK;EACd;EAEA;EACAG,cAAc;IACZ,IAAI,CAACjB,YAAY,GAAG,EAAE;IACtB,IAAI,CAACE,WAAW,CAACC,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC;EAC1C;EAEA;EACAkB,eAAe,CAACnB,IAAY;IAC1B,IAAI,CAACoB,MAAM,GAAGpB,IAAI;EACpB;EACAqB,kBAAkB;IAChB,OAAO,IAAI,CAACD,MAAM;EACpB;;AAvDW5B,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAA8B,SAAV9B,UAAU;EAAA+B,YAFT;AAAM","names":["BehaviorSubject","ApiService","constructor","http","getproduct","get","getproductbyid","id","addtocart","data","cartitemlist","push","productlist","next","console","log","products","asObservable","removecartitem","indexToRemove","findIndex","a","splice","calculateprice","total","map","price","removeallitems","sendfinalamount","amount","recievefinalamount","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\adm\\Desktop\\DummyAPI-Ecommerce-main\\src\\app\\shared\\api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { product } from '../component/product-view/productmodal';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  public cartitemlist: any = [];\n  public productlist = new BehaviorSubject<any>([])\n  public amount: number = 0;\n  constructor(private http: HttpClient) { }\n\n  getproduct() {\n    return this.http.get<product[]>(\"https://dummyjson.com/products\")\n  }\n\n  getproductbyid(id: string) {\n    return this.http.get(\"https://dummyjson.com/products/\" + id)\n  }\n\n  addtocart(data: product) {\n    this.cartitemlist.push(data);\n    this.productlist.next(this.cartitemlist);\n    console.log(this.cartitemlist)\n  }\n\n  products() {\n    return this.productlist.asObservable();\n  }\n\n\n  removecartitem(data: product) {\n    const indexToRemove = this.cartitemlist.findIndex((a: product) => data.id === a.id);\n\n    if (indexToRemove !== -1) {\n      this.cartitemlist.splice(indexToRemove, 1);\n      this.productlist.next([...this.cartitemlist]); // Using spread operator to create a new array\n    }\n  }\n\n  // total calculation\n  calculateprice() {\n    let total = 0;\n    this.cartitemlist.map((a: any) => {\n      total += a.price;\n    })\n    return total;\n  }\n\n  // remove all item\n  removeallitems() {\n    this.cartitemlist = [];\n    this.productlist.next(this.cartitemlist)\n  }\n\n  // Passing data from one component amother\n  sendfinalamount(data: number) {\n    this.amount = data\n  }\n  recievefinalamount() {\n    return this.amount;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}